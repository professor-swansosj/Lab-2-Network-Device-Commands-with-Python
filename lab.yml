title: Lab 2 — Network Device Commands with Python
course: Software Defined Networking
module: Network Automation Fundamentals
lab_number: 2
time_estimate: 90-120 Minutes

overview: >
  In this lab you’ll connect to a Cisco DevNet Always-On Catalyst device using Netmiko,
  run read-only “show” commands, push a small loopback config, then parse CLI output with
  ntc-templates to produce a short report. The emphasis is on safe automation patterns:
  prompting for credentials, error handling, structured data, and clean logging.

objectives:
  - Use Netmiko to establish an SSH session to a Cisco Catalyst 9K in the Cisco DevNet Always-On Sandbox.
  - Collect credentials securely at runtime using input() and getpass.getpass().
  - Execute basic IOS “show” commands and capture output to files.
  - Implement Python error handling (try/except) for connection and command failures.
  - Push simple configuration (loopback interfaces) from Python using iterable data structures.
  - Parse unstructured CLI output into structured data with ntc-templates (TextFSM).
  - Generate a simple, formatted report using f-strings (or Jinja2, optional).

python_version: "3.11"
accounts: ["GitHub", "Cisco DevNet"]
devices: ["Cisco DevNet Always-On Catalyst (IOS-XE/9K)"]

deliverables:
  readme_summary: "README and INSTRUCTIONS standardized; logs and artifacts present"
  instructions_summary: "Scripts complete; required log markers present; autograder passes"

grading:
  total_points: 75
  rows:
    - { step: "1. Setup",           requirement: "Container opens and packages installed",                    points: 5 }
    - { step: "2. Explore library", requirement: "Show methods or details from Netmiko",                      points: 5 }
    - { step: "3. Secure login",    requirement: "Use input for username and hidden password",                points: 4 }
    - { step: "3. Secure login",    requirement: "Device dictionary has type, host, username, password",      points: 4 }
    - { step: "4. Connect",         requirement: "Successful connection made to device",                      points: 5 }
    - { step: "5. Show command",    requirement: "Run a show command and save raw output to file",            points: 5 }
    - { step: "6. Error handling",  requirement: "Script shows clear error message for bad login or timeout", points: 8 }
    - { step: "7. Loopback config", requirement: "Add loopback from list of dictionaries",                    points: 8 }
    - { step: "7. Loopback config", requirement: "Show command verifies loopbacks and saves to file",         points: 6 }
    - { step: "8. Parse output",    requirement: "Use templates to parse show command into structured data",  points: 7 }
    - { step: "8. Parse output",    requirement: "Print structured data in clear format",                     points: 3 }
    - { step: "9. Report",          requirement: "Create and save formatted report with key device details",  points: 10 }
    - { step: "All steps",          requirement: "Logs created with start and end, no secrets shown",         points: 5 }

tips:
  - title: Dev Container Didn’t Install Dependencies
    symptom: "ModuleNotFoundError for netmiko or ntc_templates when running code."
    fix: "Open in devcontainer; verify with `pip list`. If missing, run `pip install -r requirements.txt`."
  - title: Wrong Hostname or IP Address
    symptom: "Connection times out or immediately fails."
    fix: "Use the exact host/IP from the DevNet page. If hostname fails, try the raw IP; verify DNS with `ping`."
  - title: Incorrect Device Type
    symptom: "Login fails or 'Authentication to device failed'."
    fix: "Confirm exact `device_type` from Netmiko (e.g., `cisco_ios` / `cisco_xe`). Check with `dir(netmiko)`."
  - title: Hard-Coded Credentials
    symptom: "Secrets visible in Git history."
    fix: "Use `input()` and `getpass.getpass()`; rotate credentials if accidentally committed."
  - title: Empty Parsed Data
    symptom: "`parse_output()` returns [] or IndexError."
    fix: "Match the template’s expected command exactly (e.g., `show ip interface brief`)."
  - title: File Writing Errors
    symptom: "FileNotFoundError or empty outputs."
    fix: "Write to the correct relative paths under `data/` and `logs/`."

autograder:
  log_path: logs/lab.log
  required_markers:
    - "LAB2_START"
    - "DEVCONTAINER_OK"
    - "PKG_OK: netmiko"
    - "PKG_OK: ntc-templates"
    - "CONNECT_OK"
    - "CMD=show ip interface brief"
    - "RAW_SAVED"
    - "ERR=AuthenticationException"
    - "ERR=NetMikoTimeoutException"
    - "ERR=SSHException"
    - "CFG_APPLIED"
    - "VERIFY_OK"
    - 'PARSE_OK platform=cisco command="show ip interface brief"'
    - "PPRINT_OK"
    - "REPORT_SAVED"
    - "LAB2_END"


resources:
  - title: Cisco DevNet Always-On Sandboxes
    url: https://developer.cisco.com/site/sandbox/
    note: Find the Catalyst IOS-XE device details here.
  - title: Netmiko Documentation
    url: https://ktbyers.github.io/netmiko/
  - title: NTC Templates (TextFSM)
    url: https://github.com/networktocode/ntc-templates
    note: Match exact command strings to template names.

license: "© 2025 Your Name — Classroom use."

before_you_begin: >
  Confirm the Always-On sandbox is online and note the current hostname/IP, SSH port,
  and default credentials from DevNet. Inside the dev container, verify DNS and outbound
  network access (`ping`, `curl ifconfig.me`).

steps:
  - title: Clone the Repository
    goal: "Getting your own copy of the starter repo."
    actions: |
      Clone the repo and change into the directory so GitHub Classroom can grade your work in-place.
      (See your assignment link for the correct URL.)
    done_when: |
      - You are in the new folder (`pwd` shows the repo path).
      - `git status` shows you’re on the default branch with no local changes.
    log_marker: "LAB2_START"

  - title: Open a Dev Container
    goal: "Open a consistent dev environment (Python libs preinstalled)."
    actions: |
      Reopen in Container and wait for the first-time build to finish. Then review the health files.
    done_when: |
      - `logs/DEVCONTAINER_STATUS.txt` shows `Overall status: READY`.
      - `logs/devcontainer_health.log` shows DNS_OK / NET_OK / PKG_OK lines.
    log_marker: "DEVCONTAINER_OK"

  - title: Confirm Sandbox Target
    goal: "Identify the exact device and verify reachability from the container."
    actions: |
      Note the host/IP, port, username, and password from DevNet. Test name resolution and ping from inside the container.
    done_when: |
      - You can reach the host/IP (ping succeeds or IP reachable).
      - You can SSH interactively (optional sanity check).
    log_marker: "SANDBOX_READY"

  - title: Explore the Library Surface Area
    goal: "Discover the connection class, device types, and send-command method."
    actions: |
      In `python`, use `dir()`, `help()`, and `inspect` to explore Netmiko and identify the correct `device_type`.
    done_when: |
      - You can name the connection class you’ll use.
      - You can state the correct device type string for IOS/IOS-XE.
      - You know which method sends a command to the device.
    log_marker: "STEP_DONE"

  - title: Establish Connection & Run a Show Command
    goal: "Build your first script that connects and runs one command."
    actions: |
      Create `src/connect_basic.py`. Prompt for creds, build the device dict, connect, run `show ip interface brief`,
      print output, and save raw output to `data/raw/show_ip_int_brief.txt`. Log events to `logs/connect_basic.log`.
    done_when: |
      - You see command output in the terminal.
      - `data/raw/show_ip_int_brief.txt` is non-empty.
      - `logs/connect_basic.log` shows CONNECT_OK, CMD=..., RAW_SAVED=...
    log_marker: "CONNECT_OK"

  - title: Add Error Handling
    goal: "Handle bad creds, timeouts, and SSH failures gracefully."
    actions: |
      Create `src/connect_with_errors.py`. Wrap connect/command in try/except; print clear messages; log an exit-with-error line.
    done_when: |
      - A friendly error shows for bad password and for unreachable host.
      - `logs/connect_with_errors.log` shows one of: AuthenticationException / NetMikoTimeoutException / SSHException and EXIT_WITH_ERROR.
    log_marker: "EXIT_WITH_ERROR"

  - title: Automate Loopback Configuration
    goal: "Push small, repeatable config from structured data and verify."
    actions: |
      Create `src/add_loopbacks.py`. Iterate a list of dictionaries to add Loopbacks, verify via show command,
      and save verification to `data/raw/verify_loopbacks.txt`. Log one line per interface.
    done_when: |
      - Loopbacks appear in device output.
      - `data/raw/verify_loopbacks.txt` exists and is non-empty.
      - `logs/add_loopbacks.log` shows CFG_APPLIED lines and a VERIFY_OK line.
    log_marker: "CFG_APPLIED count=<n>"

  - title: Parse CLI Output with ntc-templates
    goal: "Convert raw CLI to structured data with TextFSM templates."
    actions: |
      Create `src/parse_and_report.py`. Run show commands and parse with ntc-templates; pretty-print the structured data.
    done_when: |
      - Terminal shows structured data.
      - `logs/parse_and_report.log` shows PARSE_OK and PPRINT_OK.
    log_marker: "PARSE_OK command=\"show ip interface brief\""

  - title: Generate a Short Report
    goal: "Produce a readable summary file."
    actions: |
      In the same script, build a brief report (hostname, model, uptime, up/up count) and save to `data/reports/device_report.txt`.
    done_when: |
      - `data/reports/device_report.txt` exists with the key fields.
      - `logs/parse_and_report.log` shows REPORT_SAVED=...
    log_marker: "REPORT_SAVED=data/reports/device_report.txt"

  - title: Commit, Push, Verify
    goal: "Submit and verify in GitHub Classroom."
    actions: |
      Commit all changes and push. Open the Actions tab in your repo and review the autograder run.
    done_when: |
      - Actions shows green for this lab.
      - Repo contains all required scripts, raw outputs, report, and logs; health files show READY.
    log_marker: "LAB2_END"

faq:
  - q: The device type confuses me—`cisco_ios` or `cisco_xe`?
    a: Use `cisco_ios` for most IOS-XE Catalyst devices with Netmiko; verify by checking Netmiko’s supported types.
  - q: Parsing returns empty lists—what gives?
    a: Ensure the command string matches the template exactly (e.g., `show ip interface brief`, not an alias).
  - q: Where do logs and outputs go?
    a: Logs under `logs/`, raw CLI under `data/raw/`, and your final report under `data/reports/`.

submission_checklist:
  - "Logs show start/end and required markers without secrets."
  - "Raw output saved for `show ip interface brief`."
  - "Loopbacks configured and verified with saved output."
  - "Parsed data printed and included in the report."
  - "`data/reports/device_report.txt` exists and includes hostname/model/uptime."

# noop: trigger verify workflow
ls
